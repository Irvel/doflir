# Generated from Doflir.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\60")
        buf.write("\u014f\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3")
        buf.write("\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!")
        buf.write("\3!\3!\3\"\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u00e7\n%\3&\3&\7&\u00eb\n")
        buf.write("&\f&\16&\u00ee\13&\3\'\3\'\7\'\u00f2\n\'\f\'\16\'\u00f5")
        buf.write("\13\'\3\'\3\'\3(\3(\3)\5)\u00fc\n)\3)\6)\u00ff\n)\r)\16")
        buf.write(")\u0100\3*\5*\u0104\n*\3*\6*\u0107\n*\r*\16*\u0108\3*")
        buf.write("\3*\7*\u010d\n*\f*\16*\u0110\13*\3*\3*\6*\u0114\n*\r*")
        buf.write("\16*\u0115\5*\u0118\n*\3+\3+\5+\u011c\n+\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\5,\u0127\n,\3-\3-\3-\3-\7-\u012d\n-\f-\16")
        buf.write("-\u0130\13-\3-\3-\3-\3-\3-\3.\3.\3.\3.\7.\u013b\n.\f.")
        buf.write("\16.\u013e\13.\3.\3.\3/\5/\u0143\n/\3/\3/\5/\u0147\n/")
        buf.write("\3\60\6\60\u014a\n\60\r\60\16\60\u014b\3\60\3\60\3\u012e")
        buf.write("\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
        buf.write("\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O\2Q)S*U+W,Y-[.]/_\60\3\2\b\4\2C\\c|\6\2\62;C\\aac|")
        buf.write("\6\2\f\f\17\17$$^^\3\2\62;\4\2\f\f\17\17\5\2\13\f\16\17")
        buf.write("\"\"\2\u0162\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3")
        buf.write("\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2")
        buf.write("\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2")
        buf.write("\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2")
        buf.write("#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2Q\3\2\2\2\2S\3\2")
        buf.write("\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3")
        buf.write("\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5c\3\2\2\2\7e\3\2\2\2\tg")
        buf.write("\3\2\2\2\13i\3\2\2\2\rk\3\2\2\2\17m\3\2\2\2\21o\3\2\2")
        buf.write("\2\23q\3\2\2\2\25s\3\2\2\2\27z\3\2\2\2\31}\3\2\2\2\33")
        buf.write("\177\3\2\2\2\35\u0081\3\2\2\2\37\u0083\3\2\2\2!\u0087")
        buf.write("\3\2\2\2#\u0089\3\2\2\2%\u008c\3\2\2\2\'\u008e\3\2\2\2")
        buf.write(")\u0090\3\2\2\2+\u0093\3\2\2\2-\u0095\3\2\2\2/\u0098\3")
        buf.write("\2\2\2\61\u009a\3\2\2\2\63\u009d\3\2\2\2\65\u00a0\3\2")
        buf.write("\2\2\67\u00a3\3\2\2\29\u00a7\3\2\2\2;\u00aa\3\2\2\2=\u00ae")
        buf.write("\3\2\2\2?\u00b5\3\2\2\2A\u00b8\3\2\2\2C\u00bd\3\2\2\2")
        buf.write("E\u00c1\3\2\2\2G\u00c4\3\2\2\2I\u00e6\3\2\2\2K\u00e8\3")
        buf.write("\2\2\2M\u00ef\3\2\2\2O\u00f8\3\2\2\2Q\u00fb\3\2\2\2S\u0103")
        buf.write("\3\2\2\2U\u011b\3\2\2\2W\u0126\3\2\2\2Y\u0128\3\2\2\2")
        buf.write("[\u0136\3\2\2\2]\u0146\3\2\2\2_\u0149\3\2\2\2ab\7=\2\2")
        buf.write("b\4\3\2\2\2cd\7?\2\2d\6\3\2\2\2ef\7]\2\2f\b\3\2\2\2gh")
        buf.write("\7.\2\2h\n\3\2\2\2ij\7_\2\2j\f\3\2\2\2kl\7}\2\2l\16\3")
        buf.write("\2\2\2mn\7\177\2\2n\20\3\2\2\2op\7*\2\2p\22\3\2\2\2qr")
        buf.write("\7+\2\2r\24\3\2\2\2st\7f\2\2tu\7g\2\2uv\7h\2\2vw\7k\2")
        buf.write("\2wx\7p\2\2xy\7g\2\2y\26\3\2\2\2z{\7/\2\2{|\7@\2\2|\30")
        buf.write("\3\2\2\2}~\7`\2\2~\32\3\2\2\2\177\u0080\7/\2\2\u0080\34")
        buf.write("\3\2\2\2\u0081\u0082\7-\2\2\u0082\36\3\2\2\2\u0083\u0084")
        buf.write("\7p\2\2\u0084\u0085\7q\2\2\u0085\u0086\7v\2\2\u0086 \3")
        buf.write("\2\2\2\u0087\u0088\7B\2\2\u0088\"\3\2\2\2\u0089\u008a")
        buf.write("\7\60\2\2\u008a\u008b\7\60\2\2\u008b$\3\2\2\2\u008c\u008d")
        buf.write("\7,\2\2\u008d&\3\2\2\2\u008e\u008f\7\61\2\2\u008f(\3\2")
        buf.write("\2\2\u0090\u0091\7\61\2\2\u0091\u0092\7\61\2\2\u0092*")
        buf.write("\3\2\2\2\u0093\u0094\7@\2\2\u0094,\3\2\2\2\u0095\u0096")
        buf.write("\7@\2\2\u0096\u0097\7?\2\2\u0097.\3\2\2\2\u0098\u0099")
        buf.write("\7>\2\2\u0099\60\3\2\2\2\u009a\u009b\7>\2\2\u009b\u009c")
        buf.write("\7?\2\2\u009c\62\3\2\2\2\u009d\u009e\7?\2\2\u009e\u009f")
        buf.write("\7?\2\2\u009f\64\3\2\2\2\u00a0\u00a1\7#\2\2\u00a1\u00a2")
        buf.write("\7?\2\2\u00a2\66\3\2\2\2\u00a3\u00a4\7c\2\2\u00a4\u00a5")
        buf.write("\7p\2\2\u00a5\u00a6\7f\2\2\u00a68\3\2\2\2\u00a7\u00a8")
        buf.write("\7q\2\2\u00a8\u00a9\7t\2\2\u00a9:\3\2\2\2\u00aa\u00ab")
        buf.write("\7P\2\2\u00ab\u00ac\7c\2\2\u00ac\u00ad\7P\2\2\u00ad<\3")
        buf.write("\2\2\2\u00ae\u00af\7t\2\2\u00af\u00b0\7g\2\2\u00b0\u00b1")
        buf.write("\7v\2\2\u00b1\u00b2\7w\2\2\u00b2\u00b3\7t\2\2\u00b3\u00b4")
        buf.write("\7p\2\2\u00b4>\3\2\2\2\u00b5\u00b6\7k\2\2\u00b6\u00b7")
        buf.write("\7h\2\2\u00b7@\3\2\2\2\u00b8\u00b9\7g\2\2\u00b9\u00ba")
        buf.write("\7n\2\2\u00ba\u00bb\7u\2\2\u00bb\u00bc\7g\2\2\u00bcB\3")
        buf.write("\2\2\2\u00bd\u00be\7h\2\2\u00be\u00bf\7q\2\2\u00bf\u00c0")
        buf.write("\7t\2\2\u00c0D\3\2\2\2\u00c1\u00c2\7k\2\2\u00c2\u00c3")
        buf.write("\7p\2\2\u00c3F\3\2\2\2\u00c4\u00c5\7y\2\2\u00c5\u00c6")
        buf.write("\7j\2\2\u00c6\u00c7\7k\2\2\u00c7\u00c8\7n\2\2\u00c8\u00c9")
        buf.write("\7g\2\2\u00c9H\3\2\2\2\u00ca\u00cb\7k\2\2\u00cb\u00cc")
        buf.write("\7p\2\2\u00cc\u00e7\7v\2\2\u00cd\u00ce\7h\2\2\u00ce\u00cf")
        buf.write("\7n\2\2\u00cf\u00d0\7q\2\2\u00d0\u00d1\7c\2\2\u00d1\u00e7")
        buf.write("\7v\2\2\u00d2\u00d3\7d\2\2\u00d3\u00d4\7q\2\2\u00d4\u00d5")
        buf.write("\7q\2\2\u00d5\u00e7\7n\2\2\u00d6\u00d7\7u\2\2\u00d7\u00d8")
        buf.write("\7v\2\2\u00d8\u00d9\7t\2\2\u00d9\u00da\7k\2\2\u00da\u00db")
        buf.write("\7p\2\2\u00db\u00e7\7i\2\2\u00dc\u00dd\7x\2\2\u00dd\u00de")
        buf.write("\7g\2\2\u00de\u00df\7e\2\2\u00df\u00e0\7v\2\2\u00e0\u00e1")
        buf.write("\7q\2\2\u00e1\u00e7\7t\2\2\u00e2\u00e3\7x\2\2\u00e3\u00e4")
        buf.write("\7q\2\2\u00e4\u00e5\7k\2\2\u00e5\u00e7\7f\2\2\u00e6\u00ca")
        buf.write("\3\2\2\2\u00e6\u00cd\3\2\2\2\u00e6\u00d2\3\2\2\2\u00e6")
        buf.write("\u00d6\3\2\2\2\u00e6\u00dc\3\2\2\2\u00e6\u00e2\3\2\2\2")
        buf.write("\u00e7J\3\2\2\2\u00e8\u00ec\t\2\2\2\u00e9\u00eb\t\3\2")
        buf.write("\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ea")
        buf.write("\3\2\2\2\u00ec\u00ed\3\2\2\2\u00edL\3\2\2\2\u00ee\u00ec")
        buf.write("\3\2\2\2\u00ef\u00f3\7$\2\2\u00f0\u00f2\n\4\2\2\u00f1")
        buf.write("\u00f0\3\2\2\2\u00f2\u00f5\3\2\2\2\u00f3\u00f1\3\2\2\2")
        buf.write("\u00f3\u00f4\3\2\2\2\u00f4\u00f6\3\2\2\2\u00f5\u00f3\3")
        buf.write("\2\2\2\u00f6\u00f7\7$\2\2\u00f7N\3\2\2\2\u00f8\u00f9\t")
        buf.write("\5\2\2\u00f9P\3\2\2\2\u00fa\u00fc\7/\2\2\u00fb\u00fa\3")
        buf.write("\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fe\3\2\2\2\u00fd\u00ff")
        buf.write("\5O(\2\u00fe\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u00fe")
        buf.write("\3\2\2\2\u0100\u0101\3\2\2\2\u0101R\3\2\2\2\u0102\u0104")
        buf.write("\7/\2\2\u0103\u0102\3\2\2\2\u0103\u0104\3\2\2\2\u0104")
        buf.write("\u0117\3\2\2\2\u0105\u0107\5O(\2\u0106\u0105\3\2\2\2\u0107")
        buf.write("\u0108\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2")
        buf.write("\u0109\u010a\3\2\2\2\u010a\u010e\7\60\2\2\u010b\u010d")
        buf.write("\5O(\2\u010c\u010b\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c")
        buf.write("\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0118\3\2\2\2\u0110")
        buf.write("\u010e\3\2\2\2\u0111\u0113\7\60\2\2\u0112\u0114\5O(\2")
        buf.write("\u0113\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0113\3")
        buf.write("\2\2\2\u0115\u0116\3\2\2\2\u0116\u0118\3\2\2\2\u0117\u0106")
        buf.write("\3\2\2\2\u0117\u0111\3\2\2\2\u0118T\3\2\2\2\u0119\u011c")
        buf.write("\5Q)\2\u011a\u011c\5S*\2\u011b\u0119\3\2\2\2\u011b\u011a")
        buf.write("\3\2\2\2\u011cV\3\2\2\2\u011d\u011e\7v\2\2\u011e\u011f")
        buf.write("\7t\2\2\u011f\u0120\7w\2\2\u0120\u0127\7g\2\2\u0121\u0122")
        buf.write("\7h\2\2\u0122\u0123\7c\2\2\u0123\u0124\7n\2\2\u0124\u0125")
        buf.write("\7u\2\2\u0125\u0127\7g\2\2\u0126\u011d\3\2\2\2\u0126\u0121")
        buf.write("\3\2\2\2\u0127X\3\2\2\2\u0128\u0129\7\61\2\2\u0129\u012a")
        buf.write("\7,\2\2\u012a\u012e\3\2\2\2\u012b\u012d\13\2\2\2\u012c")
        buf.write("\u012b\3\2\2\2\u012d\u0130\3\2\2\2\u012e\u012f\3\2\2\2")
        buf.write("\u012e\u012c\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u012e\3")
        buf.write("\2\2\2\u0131\u0132\7,\2\2\u0132\u0133\7\61\2\2\u0133\u0134")
        buf.write("\3\2\2\2\u0134\u0135\b-\2\2\u0135Z\3\2\2\2\u0136\u0137")
        buf.write("\7\61\2\2\u0137\u0138\7\61\2\2\u0138\u013c\3\2\2\2\u0139")
        buf.write("\u013b\n\6\2\2\u013a\u0139\3\2\2\2\u013b\u013e\3\2\2\2")
        buf.write("\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013f\3")
        buf.write("\2\2\2\u013e\u013c\3\2\2\2\u013f\u0140\b.\2\2\u0140\\")
        buf.write("\3\2\2\2\u0141\u0143\7\17\2\2\u0142\u0141\3\2\2\2\u0142")
        buf.write("\u0143\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0147\7\f\2\2")
        buf.write("\u0145\u0147\7\17\2\2\u0146\u0142\3\2\2\2\u0146\u0145")
        buf.write("\3\2\2\2\u0147^\3\2\2\2\u0148\u014a\t\7\2\2\u0149\u0148")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u0149\3\2\2\2\u014b")
        buf.write("\u014c\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014e\b\60\2")
        buf.write("\2\u014e`\3\2\2\2\24\2\u00e6\u00ec\u00f3\u00fb\u0100\u0103")
        buf.write("\u0108\u010e\u0115\u0117\u011b\u0126\u012e\u013c\u0142")
        buf.write("\u0146\u014b\3\b\2\2")
        return buf.getvalue()


class DoflirLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    TYPE_NAME = 36
    ID = 37
    STRING_LITERAL = 38
    INTEGER = 39
    FLOAT = 40
    NUMBER = 41
    BOOL = 42
    BLOCK_COMMENT = 43
    LINE_COMMENT = 44
    NL = 45
    WHITESPACE = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'='", "'['", "','", "']'", "'{'", "'}'", "'('", "')'", 
            "'define'", "'->'", "'^'", "'-'", "'+'", "'not'", "'@'", "'..'", 
            "'*'", "'/'", "'//'", "'>'", "'>='", "'<'", "'<='", "'=='", 
            "'!='", "'and'", "'or'", "'NaN'", "'return'", "'if'", "'else'", 
            "'for'", "'in'", "'while'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_NAME", "ID", "STRING_LITERAL", "INTEGER", "FLOAT", "NUMBER", 
            "BOOL", "BLOCK_COMMENT", "LINE_COMMENT", "NL", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "TYPE_NAME", "ID", "STRING_LITERAL", 
                  "DIGIT", "INTEGER", "FLOAT", "NUMBER", "BOOL", "BLOCK_COMMENT", 
                  "LINE_COMMENT", "NL", "WHITESPACE" ]

    grammarFileName = "Doflir.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


